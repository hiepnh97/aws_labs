AWSTemplateFormatVersion: '2010-09-09'
Description: Programmatically Utilizing S3 Select
Resources:
  UsersSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - '-'
        - - random-users
          - !Ref 'AWS::AccountId'
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
  
  UsersDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - '-'
        - - random-users-data
          - !Ref 'AWS::AccountId'
  
  UsersSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'UsersSiteBucket'
      PolicyDocument:
        Statement:
          - Sid: PublicRead
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource:
              - !Join
                - ''
                - - !GetAtt 'UsersSiteBucket.Arn'
                  - /*
  
  CopyUsers:
    Type: Custom::CopyUsers
    Properties:
      ServiceToken: !GetAtt 'CopyFunction.Arn'
      DestBucket: !Ref 'UsersSiteBucket'
      SourceBucket: das-c01-data-analytics-specialty
      APIGatewayURL: !Sub 'https://${UsersAPI}.execute-api.${AWS::Region}.amazonaws.com'
      Objects:
        - Labs/programmatically-utilizing-s3-select/web/index.html
        - Labs/programmatically-utilizing-s3-select/web/randomusers.css
        - Labs/programmatically-utilizing-s3-select/web/randomusers.js
        - Labs/programmatically-utilizing-s3-select/web/icon.png
    DependsOn:
      - UsersSiteBucket

  CopyData:
    Type: Custom::CopyData
    Properties:
      ServiceToken: !GetAtt 'CopyFunction.Arn'
      DestBucket: !Ref 'UsersDataBucket'
      SourceBucket: das-c01-data-analytics-specialty
      APIGatewayURL: !Sub 'https://${UsersAPI}.execute-api.${AWS::Region}.amazonaws.com'
      Objects:
        - Labs/users_1.json
        - Labs/users_2.json
        - Labs/users_3.json
    DependsOn:
      - UsersDataBucket
  
  CopyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::*'

  CopyFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from source bucket, modifies API Gateway Placeholder
        to URL from stack.
      Handler: lambda_function.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyRole.Arn'
      Timeout: 240
      Code:
        S3Bucket: das-c01-data-analytics-specialty
        S3Key: Labs/programmatically-utilizing-s3-select/provisioning.zip
      FunctionName: users-index-provisioner
  
  LambdaS3Admin:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  
  UsersFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: function.handler
      Role: !GetAtt 'LambdaS3Admin.Arn'
      Code:
        S3Bucket: das-c01-data-analytics-specialty
        S3Key: Labs/programmatically-utilizing-s3-select/lambda/function.zip
      Runtime: python3.8
      Timeout: 60
      FunctionName: Users_primary

  APIGatewayUsersLambdaPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'UsersFunction.Arn'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  UsersAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: Users API
      ProtocolType: HTTP
      Target: !GetAtt 'UsersFunction.Arn'

Outputs:
  pubIpAddress1:
    Description: Random Users site URL
    Value: !GetAtt 'UsersSiteBucket.WebsiteURL'

  pubIpAddress2:
    Description: Random Users data storage bucket
    Value: !Ref 'UsersDataBucket'