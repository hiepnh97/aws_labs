{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "DDB Lab 01",
    "Resources": {
        "DDBVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "InstanceTenancy": "default"
            }
        },
        "DDBVPCEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "*",
                            "Effect": "Allow",
                            "Resource": "*",
                            "Principal": "*"
                        }
                    ]
                },
                "RouteTableIds": [ { "Ref": "DDBVPCRouteTable" } ],
                "ServiceName": { "Fn::Sub": "com.amazonaws.${AWS::Region}.dynamodb"},
                "VpcId": { "Ref": "DDBVPC" }
            }
        },
        "TATOURNEY": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "game",
                        "AttributeType": "N"
                    },
                    {
                        "AttributeName": "player",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "winner",
                        "AttributeType": "N"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "game",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "player",
                        "KeyType": "RANGE"
                    }
                ],
                "GlobalSecondaryIndexes": [
                    {
                        "IndexName": "winner-index",
                        "KeySchema": [
                            {
                                "AttributeName": "winner",
                                "KeyType": "HASH"
                            }
                        ],
                        "Projection": {
                            "ProjectionType": "ALL"
                        }
                    }
                ],
                "StreamSpecification": {
                    "StreamViewType": "NEW_IMAGE"
                },
                "TableName": "TaTourney",
                "BillingMode": "PAY_PER_REQUEST"
            }
        },
        "TATOURNEYSTATS": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "player",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "player",
                        "KeyType": "HASH"
                    }
                ],
                "TableName": "TaTourneyStats",
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 30
                }
            }
        },
        "PubSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DDBVPC"
                },
                "CidrBlock": "10.0.0.0/24",
                "MapPublicIpOnLaunch": true
            }
        },
        "DDBIGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {}
        },
        "IGWAttach": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "DDBVPC"
                },
                "InternetGatewayId": {
                    "Ref": "DDBIGW"
                }
            }
        },
        "DDBVPCRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "DDBVPC"
                }
            }
        },
        "DDBRtblAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PubSubnet"
                },
                "RouteTableId": {
                    "Ref": "DDBVPCRouteTable"
                }
            }
        },
        "ToTheWorld": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "DDBIGW",
            "Properties": {
                "RouteTableId": {
                    "Ref": "DDBVPCRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "DDBIGW"
                }
            }
        },
        "WorkInstanceSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allows SSH Access to DDB Admin instance",
                "VpcId": {
                    "Ref": "DDBVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "Ec2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-015d9d29a292958e5",
                "InstanceType": "t2.medium",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/bin/echo 'e%K0D9KE' | /bin/passwd cloud_user --stdin\n",
                                "yum update -y\n",
                                "yum install -y python36 python36-devel python36-pip python36-virtualenv\n",
                                "pip-3.6 install boto3\n",
                                "mkdir /home/cloud_user/.aws\n",
                                "mkdir /root/.aws\n",
                                "echo '[default]\nregion = us-east-1' > /home/cloud_user/.aws/config\n",
                                "echo '[default]\nregion = us-east-1' > /root/.aws/config\n",
                                "wget -P /home/cloud_user https://raw.githubusercontent.com/linuxacademy/content-dynamodb-deepdive/master/labs/processingstreamswithlambda/randomgame.py\n",
                                "python3 /home/cloud_user/randomgame.py &\n",
                                "mkdir /home/cloud_user/taTourneySite\n",
                                "aws s3 sync s3://dynamodblabs/taTourneySite /home/cloud_user/taTourneySite\n",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sed -i -e \"s@AGENDPOINT@",
                                            {
                                                "Fn::Sub": "https://${TaTourneyAPI}.execute-api.${AWS::Region}.amazonaws.com/GetStats/stats"
                                            },
                                            "@g\" /home/cloud_user/taTourneySite/index.html\n"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "aws s3 sync /home/cloud_user/taTourneySite/ s3://",
                                            {
                                                "Fn::Join": [
                                                    "-",
                                                    [
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        },
                                                        "tatourney"
                                                    ]
                                                ]
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                {"Fn::Sub": "for ((n=0;n<10;n++)); do     while true; do curl -s https://${TaTourneyAPI}.execute-api.${AWS::Region}.amazonaws.com/GetStats/stats > /dev/null; done & done"}
                            ]
                        ]
                    }
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": true,
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "WorkInstanceSG"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "PubSubnet"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "DDBAdminProfile"
                }
            },
            "DependsOn": "TATOURNEY"
        },
        "AccessKey": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": "cloud_user"
            }
        },
        "DDBAdminRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
                    "arn:aws:iam::aws:policy/AmazonS3FullAccess"
                ]
            }
        },
        "LambdaDDBreadwrite": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole"
                ]
            }
        },
        "DDBAdminProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "DDBAdminRole"
                    }
                ]
            }
        },
        "DDBReadWrite": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "DDBReadWrite",
                "Roles": [
                    {
                        "Ref": "LambdaDDBreadwrite"
                    }
                ],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "application-autoscaling:DescribeScalableTargets",
                                "application-autoscaling:DescribeScalingActivities",
                                "application-autoscaling:DescribeScalingPolicies",
                                "cloudwatch:DescribeAlarmHistory",
                                "cloudwatch:DescribeAlarms",
                                "cloudwatch:DescribeAlarmsForMetric",
                                "cloudwatch:GetMetricStatistics",
                                "cloudwatch:ListMetrics",
                                "datapipeline:DescribeObjects",
                                "datapipeline:DescribePipelines",
                                "datapipeline:GetPipelineDefinition",
                                "datapipeline:ListPipelines",
                                "datapipeline:QueryObjects",
                                "dynamodb:BatchGetItem",
                                "dynamodb:Describe*",
                                "dynamodb:List*",
                                "dynamodb:GetItem",
                                "dynamodb:Query",
                                "dynamodb:Scan",
                                "dax:Describe*",
                                "dax:List*",
                                "dax:GetItem",
                                "dax:BatchGetItem",
                                "dax:Query",
                                "dax:Scan",
                                "ec2:DescribeVpcs",
                                "ec2:DescribeSubnets",
                                "ec2:DescribeSecurityGroups",
                                "iam:GetRole",
                                "iam:ListRoles",
                                "sns:ListSubscriptionsByTopic",
                                "sns:ListTopics",
                                "lambda:ListFunctions",
                                "lambda:ListEventSourceMappings",
                                "lambda:GetFunctionConfiguration",
                                "resource-groups:ListGroups",
                                "resource-groups:ListGroupResources",
                                "resource-groups:GetGroup",
                                "resource-groups:GetGroupQuery",
                                "tag:GetResources",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:UpdateItem",
                                "ec2:CreateNetworkInterface",
                                "ec2:DescribeNetworkInterfaces",
                                "ec2:DeleteNetworkInterface"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ]
                }
            }
        },
        "getTaStats": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "lambda_function.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaDDBreadwrite",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": "dynamodblabs",
                    "S3Key": "lambda/getStatsElastiCache/getTaStats.zip"
                },
                "Runtime": "python3.7",
                "Timeout": 60
            }
        },
        "taStreamProcessor": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "lambda_function.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaDDBreadwrite",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": "dynamodblabs",
                    "S3Key": "lambda/getStatsElastiCache/taStreamProcessor.zip"
                },
                "Runtime": "python3.7",
                "Timeout": 60
            }
        },
        "EventSourceMapping": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "EventSourceArn": {
                    "Fn::GetAtt": [
                        "TATOURNEY",
                        "StreamArn"
                    ]
                },
                "FunctionName": {
                    "Fn::GetAtt": [
                        "taStreamProcessor",
                        "Arn"
                    ]
                },
                "StartingPosition": "TRIM_HORIZON",
                "BatchSize": 2
            }
        },
        "TaTourneyBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::AccountId"
                            },
                            "tatourney"
                        ]
                    ]
                },
                "AccessControl": "PublicRead",
                "WebsiteConfiguration": {
                    "IndexDocument": "index.html"
                }
            }
        },
        "TaTourneyBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {"Ref": "TaTourneyBucket"},
                "PolicyDocument": {
                    "Statement":[
                      {
                        "Sid":"PublicRead",
                        "Effect":"Allow",
                        "Principal": "*",
                        "Action":["s3:GetObject"],
                        "Resource":[{"Fn::Join":[ "", [{"Fn::GetAtt": [
                            "TaTourneyBucket",
                            "Arn"
                        ]}, "/*"]]}]
                      }
                    ]
                  }
            }
        },
        "TaTourneyAPI": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "TaTourney API"
            }
        },
        "TaTourneyAPIResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "TaTourneyAPI",
                        "RootResourceId"
                    ]
                },
                "PathPart": "stats",
                "RestApiId": {
                    "Ref": "TaTourneyAPI"
                }
            }
        },
        "GetStatsAPIMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "TaTourneyAPI"
                },
                "ResourceId": {
                    "Ref": "TaTourneyAPIResource"
                },
                "HttpMethod": "GET",
                "AuthorizationType": "NONE",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "getTaStats",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "StatusCode": 200
                        }
                    ],
                    "PassthroughBehavior": "WHEN_NO_MATCH"
                },
                "MethodResponses": [
                    {
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": false
                        },
                        "StatusCode": 200
                    }
                ]
            }
        },
        "GetStatCORS": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "RestApiId": {
                    "Ref": "TaTourneyAPI"
                },
                "ResourceId": {
                    "Ref": "TaTourneyAPIResource"
                },
                "HttpMethod": "OPTIONS",
                "Integration": {
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "ResponseTemplates": {
                                "application/json": ""
                            }
                        }
                    ],
                    "PassthroughBehavior": "WHEN_NO_MATCH",
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                    },
                    "Type": "MOCK"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseModels": {
                            "application/json": "Empty"
                        },
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": false,
                            "method.response.header.Access-Control-Allow-Methods": false,
                            "method.response.header.Access-Control-Allow-Origin": false
                        }
                    }
                ]
            }
        },
        "GetStatsDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "TaTourneyAPI"
                },
                "StageName": "GetStats"
            },
            "DependsOn": [
                "GetStatsAPIMethod",
                "TaTourneyAPIResource",
                "TaTourneyAPI",
                "getTaStats"
            ]
        },
        "GetStatsInovker": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "getTaStats",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        }
    },
    "Outputs": {
        "privIpAddress2": {
            "Description": "AWS Training Architect Tournament Site",
            "Value": {
                "Fn::GetAtt" : [ "TaTourneyBucket", "WebsiteURL" ]
            }
        }
    }
}